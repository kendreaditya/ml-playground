{"version":3,"sources":["consts.js","components/visualizations/Axis.js","components/visualizations/ScatterPlot.js","components/visualizations/InteractiveScatter.js","components/interactive_graph/data_slider.js","components/DatasetPannel.js","components/visualizations/LineGraph.js","components/visualizations/ContourMap.js","components/visualizations/ContourScatter.js","components/visualizations/TSNE.js","communication/api.js","communication/websocket.js","components/ResultsPannel.js","components/ModelParameters.js","index.js"],"names":["BASE_URL","colors","models","Array","from","length","_","i","YAxis","yScale","width","textPadding","lines","axis","ticks","map","d","className","style","stroke","y1","y2","x1","x2","fontSize","x","dy","y","XAxis","xScale","height","textAnchor","Point","color","key","r","cx","cy","fill","stroke-width","Scatter","data","w","h","margin","domain","scale","right","left","top","bottom","scaleLinear","extent","flat","range","points","reduce","cluster","cluster_i","point","push","InteractiveGraph","onDatasetChange","useState","mouseDown","setMouseDown","count","scatterPlots","setScatterPlots","setCluster","addPoint","evt","onClick","e","target","dim","getBoundingClientRect","clientX","clientY","previousPlot","newPlot","JSON","parse","stringify","xy","slice","idx","backgroundColor","id","onMouseDown","onMouseUp","onMouseMove","event","onMouseLeave","overflow","transform","DatasetSlider","onSplitChange","React","value","setValue","Slider","onChange","newValue","aria-labelledby","type","DatasetPannel","LineGraph","linePath","line","curve","curveNatural","x_i","position","zIndex","strokeWidth","ContourMap","meshgrid","ref","canvas","ctx","getContext","imageData","createImageData","tmpScale","clamp","shades","a","colorScale","scaleQuantize","p","c","rgb","g","b","putImageData","drawContour","marginTop","marginBottom","marginLeft","marginRight","borderRadius","ContourScatter","clusters","x_key","y_key","point_idx","stdDeviation","TSNE","Math","max","POST_MODEL_URL","createModel","model_type","x_train","y_train","x_test","y_test","params","myHeaders","Headers","append","body","fetch","method","headers","then","res","text","catch","err","console","log","SOCKET_URL","trainWebsocket","model_id","WebSocket","dataset","apiBody","parameters","split","lbl","obj1","obj2","rnd","tmp1","tmp2","index","floor","random","shuffle","split_idx","parseInt","splice","ResultsPannel","getDataset","getParameters","getSplit","loss","setLoss","accuracy","setAccuracy","TSNE_points","setTSNE_points","setMeshgrid","trainModel","ws","onopen","onmessage","tsne","heatmap","onclose","parseParam","String","Number","Dropdown","label","param","paramType","option","Input","min","Parameters","onParameterChange","types","modelType","setModelType","modelParameters","useEffect","Object","keys","isArray","App","newDataset","newSplit","newParameters","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2e9c55de.chunk.js","sourcesContent":["import { List } from \"@material-ui/core\"\r\nimport { range } from \"d3\"\r\n\r\nexport const BASE_URL = \"127.0.0.1:8000\"\r\nexport const colors = [\"#729EFD\", \"#E9796F\", \"#647FC7\", \"#A95F56\"]\r\nexport const models = {\r\n        \"types\": [\"Suport Vector Machine (SVM)\", \"Multilayer Perceptron (MLP)\", \"Logistic Regression\", \"K-Nearest Neighbors (KNN)\", \"Decision Tree\"],\r\n        \"params\": {\r\n            \"Suport Vector Machine (SVM)\": {\r\n                \"param\": \"svm\",\r\n                \"params\": {\r\n                    \"Learning Rate\": {\"option\": [0.1, 0.01, 0.001, 0.0001, 0.00001], \"param\": \"learning_rate\"},\r\n                    \"Epochs\": {\"option\": [1, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100], \"param\": \"epoch\"},\r\n                    \"Batch Size\": {\"option\": [8, 16, 32, 64, 128], \"param\": \"batch_size\"},\r\n                    \"Optimizer\": {\"option\": [\"adam\", \"SGD\"], \"param\": \"optimizer\"},\r\n                }\r\n            },\r\n            \"Multilayer Perceptron (MLP)\": {\r\n                \"param\": \"mlp\",\r\n                \"params\": {\r\n                    \"Learning Rate\": {\"option\": [0.1, 0.01, 0.001, 0.0001, 0.00001], \"param\": \"learning_rate\"},\r\n                    \"Epochs\": {\"option\": [1, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100], \"param\": \"epoch\"},\r\n                    \"Batch Size\": {\"option\": [8, 16, 32, 64, 128], \"param\": \"batch_size\"},\r\n                    \"Optimizer\": {\"option\": [\"adam\", \"SGD\"], \"param\": \"optimizer\"},\r\n                }\r\n            },\r\n            \"Logistic Regression\": {\r\n                \"param\": \"logistic-regression\",\r\n                \"params\": {\r\n                    \"Learning Rate\": {\"option\": [0.1, 0.01, 0.001, 0.0001, 0.00001], \"param\": \"learning_rate\"},\r\n                    \"Epochs\": {\"option\": [1, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100], \"param\": \"epoch\"},\r\n                    \"Batch Size\": {\"option\": [8, 16, 32, 64, 128], \"param\": \"batch_size\"},\r\n                    \"Optimizer\": {\"option\": [\"adam\", \"SGD\"], \"param\": \"optimizer\"},\r\n                }\r\n            },\r\n            \"K-Nearest Neighbors (KNN)\": {\r\n                \"param\": \"knn\",\r\n                \"params\": {\r\n                    \"Number of Neighbors\": {\"option\": Array.from({length: 20}, (_, i) => i+1), \"param\": \"n_neighbors\"}\r\n                }\r\n            },\r\n            \"Decision Tree\": {\r\n                \"param\": \"decision-tree\",\r\n                \"params\": {\r\n                }\r\n            }}\r\n    }","import React from \"react\";\r\n\r\n// https://dev.to/julienassouline/let-s-get-started-with-react-and-d3-2nd7\r\nexport const YAxis = ({ yScale, width, textPadding=-15, lines=true }) => {\r\n\r\n    const axis = yScale.ticks(8).map((d, i) => (\r\n        <g key={i} className=\"y-tick\">\r\n            {d===0 && lines ? \r\n            <line\r\n                style={{ stroke: \"#e4e5eb\" }}\r\n                y1={yScale(d)}\r\n                y2={yScale(d)}\r\n                x1={0}\r\n                x2={width}\r\n            /> : null}\r\n\r\n            {i===0 && lines ? \r\n            <line\r\n                style={{ stroke: \"#e4e5eb\" }}\r\n                y1={width}\r\n                y2={width}\r\n                x1={0}\r\n                x2={width}\r\n            /> : null}\r\n\r\n            <line\r\n                style={{ stroke: \"#e4e5eb\" }}\r\n                y1={yScale(d)}\r\n                y2={yScale(d)}\r\n                x1={-7.5}\r\n                x2={0}\r\n            />\r\n\r\n        <text\r\n            style={{ fontSize: 12 }}\r\n            x={textPadding}\r\n            dy=\".32em\"\r\n            y={yScale(d)}\r\n        >\r\n            {d}\r\n        </text>\r\n    </g>\r\n  ));\r\n  return <>{axis}</>;\r\n}\r\n\r\nexport const XAxis = ({ xScale, height, textPadding=10}) => {\r\n\r\n    const axis = xScale.ticks(8).map((d, i) => (\r\n        <g className=\"x-tick\" key={i}>\r\n            {d===0 ?\r\n            <line\r\n                style={{ stroke: \"#e4e5eb\" }}\r\n                y1={0}\r\n                y2={height}\r\n                x1={xScale(d)}\r\n                x2={xScale(d)}\r\n            /> : null}\r\n\r\n            {i===0 ? \r\n            <line\r\n                style={{ stroke: \"#e4e5eb\" }}\r\n                y1={0}\r\n                y2={height}\r\n                x1={0}\r\n                x2={0}\r\n            /> : null}\r\n\r\n\r\n            <line\r\n                style={{ stroke: \"#e4e5eb\" }}\r\n                y1={height}\r\n                y2={height+7.5}\r\n                x1={xScale(d)}\r\n                x2={xScale(d)}\r\n            />\r\n\r\n            <text\r\n                style={{ textAnchor: \"middle\", fontSize: 12 }}\r\n                dy=\".71em\"\r\n                x={xScale(d)}\r\n                y={height + textPadding}\r\n            >\r\n                {d}\r\n            </text>\r\n        </g>\r\n    ));\r\n  return <>{axis}</>;\r\n}\r\n\r\n","import React from 'react';\r\nimport { scaleLinear } from 'd3-scale';\r\nimport { extent } from 'd3-array';\r\nimport { YAxis, XAxis } from './Axis'\r\n\r\n// https://dev.to/julienassouline/let-s-get-started-with-react-and-d3-2nd7\r\nexport const Point = ({x, y, color, key}) => {\r\n  return (\r\n    <circle className=\"point\"\r\n        key={key}\r\n        r={5}\r\n        cx={x}\r\n        cy={y}\r\n        style={{ fill: color}}\r\n        stroke=\"white\" stroke-width=\"1.5\"\r\n    />)\r\n}\r\n\r\nexport const Scatter = ({data, w, h, margin, colors, domain = {x: [-5, 5], y: [-5, 5], scale: false}}) => {\r\n  \r\n  const width = w - margin.right - margin.left,\r\n  height = h - margin.top - margin.bottom;\r\n  \r\n  const xScale = scaleLinear()\r\n  .domain((domain.scale ? extent(data.flat(), d=>d.x) : domain.x))\r\n  .range([0, width]);\r\n  \r\n  const yScale = scaleLinear()\r\n  .domain((domain.scale ? extent(data.flat(), d=>d.y) : domain.y))\r\n  .range([height, 0]);\r\n  \r\n  const points = (data || data.length!==0 ? data.reduce((points, cluster, cluster_i) => {\r\n    cluster.map((point) => (\r\n      points.push(<Point x={xScale(point.x)} y={yScale(point.y)} color={colors[cluster_i]} key={points.length}/>)\r\n    ))\r\n    return points;\r\n  }, []) : [])\r\n  \r\n  if(!data && !data[0]){\r\n    return (\r\n            <>\r\n              <YAxis yScale={yScale} width={width} />\r\n              <XAxis xScale={xScale} height={height} />\r\n            </>\r\n    );\r\n  }\r\n\r\n  return (\r\n          <>\r\n            <YAxis yScale={yScale} width={width} />\r\n            <XAxis xScale={xScale} height={height} />\r\n            {points}\r\n          </>\r\n  );\r\n}\r\n\r\nexport default Scatter;","import React, { useState } from 'react';\r\nimport { scaleLinear } from 'd3-scale';\r\nimport { colors } from '../../consts';\r\nimport { Scatter } from './ScatterPlot'\r\nimport './visualizations.css';\r\nimport '../../index.css'\r\n\r\nconst InteractiveGraph = ({onDatasetChange}) => {\r\n    const [mouseDown, setMouseDown] = useState(false);\r\n    const [scatterPlots, setScatterPlots] = useState({data: [], count: 0})\r\n    const [cluster, setCluster] = useState(0);\r\n    const points_max = 500;\r\n\r\n    onDatasetChange(scatterPlots.data)\r\n\r\n    const [w, h] = [320, 320];\r\n\r\n    const margin = {\r\n                top: 0,\r\n                bottom: 0,\r\n                left: 0,\r\n                right: 0\r\n            }\r\n    \r\n    const width = w - margin.right - margin.left,\r\n        height = h - margin.top - margin.bottom;\r\n\r\n    const xScale = scaleLinear()\r\n        .domain([0, width])\r\n        .range([-5, 5]);\r\n\r\n    const yScale = scaleLinear()\r\n        .domain([height, 0])\r\n        .range([-5, 5]);\r\n\r\n\r\n    const addPoint = (evt, onClick=false) => {\r\n        if((mouseDown || onClick) && scatterPlots.count < points_max) {\r\n            var e = evt.target;\r\n            var dim = e.getBoundingClientRect();\r\n            var x = xScale(evt.clientX - dim.left);\r\n            var y = yScale(evt.clientY - dim.top);\r\n\r\n            if(x>-4.70 && y<4.70) {\r\n            setScatterPlots(previousPlot => {\r\n                    const newPlot = JSON.parse(JSON.stringify(previousPlot))\r\n                    const xy = {x: x, y: y}\r\n\r\n                    if(newPlot.data.length-1 >= cluster)\r\n                        newPlot.data[cluster].push(xy)\r\n                    else\r\n                        newPlot.data.push([xy])\r\n\r\n                    newPlot.count++\r\n                    return newPlot\r\n                })\r\n                }\r\n            }\r\n    }\r\n\r\n    return (<>\r\n        <div className=\"colors\">\r\n            <div className=\"color-col\">\r\n                {colors.slice(0,2).map((color, idx) => (\r\n                    <button className=\"color\" style={{ backgroundColor: color }} onClick={() => (setCluster(idx))}></button>\r\n                ))}\r\n                <label id=\"point-count\">{scatterPlots.count}/{points_max}</label>\r\n            </div>\r\n            <div className=\"color-col\">\r\n                <button id=\"reset-button\" onClick={() => setScatterPlots({data: [], count: 0})}>Reset</button>\r\n            </div>\r\n        </div>\r\n        <div className=\"container\" style={{ \"background\": \"#FFFFFF\", \"width\": \"20em\", \"height\": \"20em\" }}>\r\n            <svg width={w} height={h} onMouseDown={() => setMouseDown(true)} onMouseUp={() => setMouseDown(false)} onMouseMove={addPoint} onClick={event => addPoint(event, true)} onMouseLeave={event => setMouseDown(false)} style={{overflow: \"visible\"}}>\r\n            <g transform={`translate(${margin.left},${margin.top})`}>\r\n                <Scatter data={scatterPlots.data} colors={colors} w={w} h={h} margin={margin}/>\r\n            </g>\r\n            </svg>\r\n        </div>\r\n    </>)\r\n}\r\n\r\nexport default InteractiveGraph;","import React from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Slider from '@material-ui/core/Slider';\r\n\r\nconst DatasetSlider = ({onSplitChange}) => {\r\n  const [value, setValue] = React.useState(80);\r\n  onSplitChange(value);\r\n\r\n  const handleChange = (event, newValue) => {\r\n    setValue(newValue);\r\n  };\r\n\r\n  return (\r\n    <div className=\"container dataset-slider\">\r\n        Training Data Split\r\n        <div className=\"slider\">\r\n          <Slider id=\"slider\" className=\"slider-col\" value={value} onChange={handleChange} aria-labelledby=\"continuous-slider\" />\r\n          <input className=\"slider-col\" type=\"text\" value={value} style={{width: \"50px\"}}/>\r\n        </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DatasetSlider;","import React from \"react\";\r\nimport InteractiveGraph from './visualizations/InteractiveScatter'\r\nimport DatasetSlider from \"./interactive_graph/data_slider\";\r\n\r\nconst DatasetPannel = ({onDatasetChange, onSplitChange}) => {\r\n\r\n  return (<>\r\n        <InteractiveGraph onDatasetChange={onDatasetChange}/>\r\n        <DatasetSlider onSplitChange={onSplitChange}/>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default DatasetPannel;","import React from \"react\";\r\nimport { scaleLinear } from 'd3-scale';\r\nimport { line, curveNatural } from \"d3-shape\";\r\nimport { extent } from 'd3-array';\r\nimport { YAxis } from './Axis'\r\n\r\n// https://github.com/mmmaaatttttt/personal-site/blob/4e78b7dc7ea0e16995406803d961ab6271e980d4/src/story_components/atoms/LinePlot/index.js\r\nconst LineGraph = ({ x=[10, 9, 8], w=320, h=320/2, margin={ top: 5, bottom: 5, left: 5, right: 5 }, color, domain=null}) => {\r\n    const width = w - margin.right - margin.left,\r\n        height = h - margin.top - margin.bottom;\r\n\r\n    const xScale = scaleLinear()\r\n        .domain([0, x.length])\r\n        .range([0, width]);\r\n\r\n    const yScale = scaleLinear()\r\n        .domain((domain===null ? extent(x.flat(), d=>d) : domain))\r\n        .range([height, 0]);\r\n\r\n    const linePath = line()\r\n        .x(d => xScale(d.x))\r\n        .y(d => yScale(d.y))\r\n        .curve(curveNatural);\r\n    \r\n    const data = x.map((x_i, i) => ({x: i, y: x_i}))\r\n\r\n    return (\r\n        <>\r\n            <div className=\"container\" style={{ \"background\": \"#FFFFFF\", \"width\": \"20em\", \"height\": \"10em\" }}>\r\n                <svg width={w} height={h} style={{position: \"absolute\", zIndex: 2}} style={{overflow: \"visible\"}}>\r\n                    <g transform={`translate(${margin.left},${margin.top})`}>\r\n                        <YAxis yScale={yScale} width={width} lines={false} textPadding={-30}/>\r\n                        <path\r\n                            d={linePath(data)}\r\n                            strokeWidth={3}\r\n                            stroke={color}\r\n                            fill=\"none\"\r\n                        />\r\n                    </g>\r\n                </svg>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default LineGraph;","import React from 'react';\r\nimport {rgb, range} from 'd3';\r\nimport { scaleLinear, scaleQuantize } from 'd3-scale';\r\n\r\nconst ContourMap = ({ meshgrid, w, h , margin}) => {\r\n\r\n    const drawContour = (canvas) => {\r\n        if(!canvas || meshgrid.length === 0)\r\n            return;\r\n        const ctx = canvas.getContext('2d');\r\n        const imageData = ctx.createImageData(w, h);\r\n\r\n        let tmpScale = scaleLinear()\r\n            .domain([0, .5, 1])\r\n            .range([\"#DC7C71\", \"white\", \"#7EA0FB\"])\r\n            .clamp(true);\r\n        let shades = range(0, 1 + 1E-9, 1 / 255).map(a => {\r\n            return tmpScale(a);\r\n        });\r\n        let colorScale = scaleQuantize()\r\n            .domain([0, 1])\r\n            .range(shades)\r\n        \r\n        for (let y = 0, p = -1; y < h; ++y) {\r\n            for (let x = 0; x < w; ++x) {\r\n                let value = meshgrid[x][y];\r\n\r\n                let c = rgb(colorScale(value));\r\n                imageData.data[++p] = c.r;\r\n                imageData.data[++p] = c.g;\r\n                imageData.data[++p] = c.b;\r\n                imageData.data[++p] = 255;\r\n            }\r\n        }\r\n\r\n        ctx.putImageData(imageData, 0, 0);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <canvas ref={canvas=>drawContour(canvas)} height={h} width={w}\r\n            style={{position: \"absolute\", \r\n                zIndex: 1,\r\n                marginTop: margin.top,\r\n                marginBottom: margin.bottom,\r\n                marginLeft: margin.left,\r\n                marginRight: margin.right,\r\n                borderRadius: 10,\r\n                }}\r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ContourMap;","import React from 'react';\r\nimport { Scatter } from './ScatterPlot'\r\nimport { colors } from '../../consts';\r\nimport ContourMap from './ContourMap';\r\n\r\n\r\nconst ContourScatter = ({points, meshgrid}) => {\r\n  const margin = {\r\n              top: 0,\r\n              bottom: 0,\r\n              left: 0,\r\n              right: 0\r\n  }\r\n\r\n  if(!points || points.length === 0)  {\r\n    var scatterPlots = [];\r\n  } else { \r\n    var scatterPlots = [[\"x_train\", \"y_train\"],[\"x_test\", \"y_test\"]].reduce((clusters, [x_key, y_key], idx) => {\r\n      points[x_key].map((point, point_idx) => {\r\n        clusters[points[y_key][point_idx] + (idx===1?2:idx)].push({x: point[0], y: point[1]})\r\n      })\r\n      return clusters\r\n    }, [[], [], [], []])\r\n\r\n  }\r\n\r\n  \r\n  return (\r\n    <div className=\"container\" style={{ \"background\": \"#FFFFFF\", \"width\": \"20em\", \"height\": \"20em\" }}>\r\n      <ContourMap meshgrid={meshgrid} w={320} h={320} margin={margin} style={{position: \"absolute\", zIndex: 1}}/>\r\n      <svg width={320} height={320} style={{position: \"absolute\", zIndex: 2, overflow: \"visible\"}}>\r\n        <defs>\r\n            <filter id=\"blur\">\r\n                <feGaussianBlur stdDeviation=\"50\" />\r\n            </filter>\r\n        </defs>\r\n        <g transform={`translate(${margin.left},${margin.top})`}>\r\n          <Scatter data={scatterPlots} colors={colors} w={320} h={320} margin={margin}/>\r\n        </g>\r\n      </svg>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ContourScatter;","import React from \"react\";\r\nimport { Scatter } from './ScatterPlot';\r\nimport { colors } from '../../consts';\r\n\r\n\r\nconst TSNE = ({ points }) => {\r\n\r\n    const margin = {\r\n                top: 0,\r\n                bottom: 0,\r\n                left: 0,\r\n                right: 0\r\n    }\r\n\r\n    var scatterPlots = (points.x.length !==0 ? points.x.reduce((clusters, x, i) => {\r\n      clusters[points.y[i]].push({\r\n        x: x[0],\r\n        y: x[1]\r\n      }) \r\n\r\n      return clusters\r\n    }, Array.from(Array(Math.max(...points.y)+1), () => [])) : [])\r\n\r\n  \r\n  return (\r\n    <div className=\"container\" style={{ \"background\": \"#FFFFFF\", \"width\": \"20em\", \"height\": \"20em\" }}>\r\n      <svg width={320} height={320} style={{overflow: \"visible\"}}>\r\n        <g transform={`translate(${margin.left},${margin.top})`}>\r\n            <Scatter data={scatterPlots} colors={colors} domain={{x: [-5, 5], y: [-5, 5], scale: true}} w={320} h={320} margin={margin}\r\n            style={{\r\n                position: \"absolute\"\r\n            }} \r\n            />\r\n        </g>\r\n      </svg>\r\n    </div>\r\n  )\r\n\r\n}\r\n\r\nexport default TSNE;","import { BASE_URL } from '../consts';\r\n\r\nconst POST_MODEL_URL = `http://${BASE_URL}/model/create/`;\r\nconst GET_MODEL_PARAMETERS = `http://${BASE_URL}/model/parameters/`;\r\n\r\nexport const createModel = ({model_type, x_train, y_train, x_test, y_test, params}) => {\r\n    var myHeaders = new Headers();\r\n    myHeaders.append(\"Content-Type\", \"application/json\");\r\n\r\n    var body = JSON.stringify({\r\n            model_type: model_type,\r\n            x_train: x_train,\r\n            y_train: y_train,\r\n            x_test: x_test,\r\n            y_test: y_test, \r\n            params: params, \r\n        });\r\n\r\n    \r\n    var requestOptions = {\r\n      method: 'POST',\r\n      headers: myHeaders,\r\n      body: body,\r\n    };\r\n\r\n    return fetch(POST_MODEL_URL, requestOptions).then(res => res.text()).catch(err => console.log(err))\r\n}\r\n\r\nexport const modelParameters = () => {\r\n    var myHeaders = new Headers();\r\n    myHeaders.append(\"Content-Type\", \"application/json\");\r\n\r\n    var requestOptions = {\r\n      method: 'GET',\r\n      headers: myHeaders,\r\n    };\r\n\r\n    return fetch(GET_MODEL_PARAMETERS, requestOptions).then(res => res.json())\r\n}","import { BASE_URL } from '../consts';\r\n\r\nconst SOCKET_URL = `ws://${BASE_URL}/model/train/`;\r\n\r\n// export const TrainWebsocket = (model_id) => {\r\n//     return useWebSocket(SOCKET_URL+model_id, {share: true});\r\n// }\r\n\r\nexport const trainWebsocket = (model_id) => {\r\n    const ws = new WebSocket(SOCKET_URL+model_id)\r\n    return ws\r\n}","import React, { useState } from \"react\";\r\nimport LineGraph from './visualizations/LineGraph';\r\nimport ContourScatter from './visualizations/ContourScatter';\r\nimport TSNE from './visualizations/TSNE';\r\nimport { createModel } from \"../communication/api\";\r\nimport { trainWebsocket } from \"../communication/websocket\";\r\nimport { colors } from \"../consts\";\r\nimport { timeFormatDefaultLocale } from \"d3\";\r\n\r\nfunction shuffle(obj1, obj2) {\r\n  var index = obj1.length;\r\n  var rnd, tmp1, tmp2;\r\n\r\n  while (index) {\r\n    rnd = Math.floor(Math.random() * index);\r\n    index -= 1;\r\n    tmp1 = obj1[index];\r\n    tmp2 = obj2[index];\r\n    obj1[index] = obj1[rnd];\r\n    obj2[index] = obj2[rnd];\r\n    obj1[rnd] = tmp1;\r\n    obj2[rnd] = tmp2;\r\n  }\r\n}\r\n\r\nconst apiBody = (dataset, parameters, split) => {\r\n    const y_test = [];\r\n    const x_test = [];\r\n\r\n    dataset.map((cluster, lbl) => {\r\n        cluster.map((point) => {\r\n            y_test.push(lbl)\r\n            x_test.push([point.x, point.y])\r\n        })\r\n    })\r\n\r\n    shuffle(y_test, x_test);\r\n\r\n    const split_idx = parseInt(y_test.length*(split/100))\r\n    parameters[\"y_train\"] = y_test.splice(0, split_idx)\r\n    parameters[\"y_test\"] = y_test\r\n    parameters[\"x_train\"] = x_test.splice(0, split_idx)\r\n    parameters[\"x_test\"] = x_test\r\n\r\n    console.log(parameters)\r\n    return parameters\r\n}\r\n\r\nvar dataset;\r\n\r\nconst ResultsPannel= ({getDataset, getParameters, getSplit}) => {\r\n    const [loss, setLoss] = useState([])\r\n    const [accuracy, setAccuracy] = useState([])\r\n    const [TSNE_points, setTSNE_points] = useState({x: [], y:[]})\r\n    const [meshgrid, setMeshgrid] = useState([])\r\n\r\n    const trainModel = async () => {\r\n        const body = apiBody(getDataset(), getParameters(), getSplit())\r\n        dataset = JSON.parse(JSON.stringify(body))\r\n        delete dataset[\"model_type\"]\r\n        delete dataset[\"params\"]\r\n\r\n        var model_id = await createModel(body)\r\n\r\n        const ws = trainWebsocket(model_id)\r\n\r\n        ws.onopen = () => {\r\n            console.log('connected')\r\n        }\r\n\r\n        ws.onmessage = evt => {\r\n            const data = JSON.parse(evt.data)\r\n            setLoss(loss => {\r\n                return [...loss, data.loss]\r\n            })\r\n\r\n            setAccuracy(accuracy => {\r\n                return [...accuracy, data.accuracy]\r\n            })\r\n\r\n            setTSNE_points({x: data.tsne, y: body[\"y_train\"]})\r\n\r\n            setMeshgrid(data.heatmap)\r\n        }\r\n\r\n        ws.onclose = () => console.log(\"disconnect\");\r\n    }\r\n    \r\n\r\n    return (<>\r\n            <button id=\"train-button\" onClick={trainModel}>Train Me!</button>\r\n            <LineGraph x={loss} color={colors[0]}/>\r\n            <LineGraph x={accuracy} color={colors[0]} domain={[0, 1]}/>\r\n            <ContourScatter points={dataset} meshgrid={meshgrid}/>\r\n            <TSNE points={TSNE_points}/>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ResultsPannel;\r\n","import React, { useState } from \"react\";\r\nimport { models } from \"../consts\";\r\n\r\nconst parseParam = {\"string\": String, \"number\": Number}\r\n\r\nconst Dropdown = ({className, label, param, onChange=()=>{}}) => {\r\n  const paramType = parseParam[typeof(param.option[0])]\r\n  if(param.param)\r\n    onChange(param.option[0], param.param)\r\n  return (\r\n    <div className={className}>\r\n      <p style={{marginBottom: \"5px\"}}>{label}</p>\r\n      <select onChange={(event) =>onChange(paramType(event.target.value), param.param)} className=\"input-parameter\">\r\n        {param.option.map((option) => <option value={option}>{option}</option>)}\r\n      </select>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst Input = ({className, label, param}) => {\r\n    return (\r\n      <div className={className}>\r\n        <p>{label}</p>\r\n        <input className=\"input-parameter\" type=\"number\" value={(param.option.min+param.option.max)/2} min={param.option.min} max={param.option.max}/>\r\n      </div>\r\n    )\r\n}\r\n\r\nconst renderParameters = (params, onChange) => {\r\n  return Object.keys(params).map((key) => {\r\n    const param = params[key]\r\n    if(Array.isArray(param.option)) {\r\n      return <Dropdown className=\"parameter-col\" label={key} param={param} onChange={onChange}/>\r\n    }\r\n    else {\r\n      return <Input className=\"parameter-col\" label={key} param={param} onChange={onChange}/>\r\n    }\r\n  })\r\n}\r\n\r\nconst Parameters = ({onParameterChange}) => {\r\n  const [modelType, setModelType] = useState(models.types[0])\r\n  // JSON of parametners -> resets on modelType change\r\n  // const [modelParameters, setModelParameters] = useState({})\r\n  var modelParameters = {\"model_type\": models.params[modelType].param, \"params\": {}}; \r\n\r\n  const addModelParameters = (value, param) => {\r\n    modelParameters.params[param] = value;\r\n    onParameterChange(modelParameters)\r\n  }\r\n\r\n  React.useEffect(()=>onParameterChange(modelParameters), [modelParameters])\r\n\r\n  return (<>\r\n    <div className=\"container parameter\" style={{ \"background\": \"#FFFFFF\" }}>\r\n      <Dropdown label={\"Model Type\"} param={{\"option\": models.types}} value={modelType} onChange={(value, _)=>setModelType(value)}/>\r\n      <div className=\"parameters\">\r\n        {renderParameters(models.params[modelType].params, addModelParameters)}\r\n      </div>\r\n    </div>\r\n  </>)\r\n}\r\n\r\nexport default Parameters;","import ReactDOM from 'react-dom';\nimport React from \"react\";\nimport DatasetPannel from './components/DatasetPannel';\nimport ResultsPannel from './components/ResultsPannel';\nimport Parameters from './components/ModelParameters';\nimport './index.css';\n\nconst App = () => {\n  // Not using useState as I don't want to relod the app on every change\n  var dataset;\n  var parameters;\n  var split;\n  \n  const setDataset = (newDataset) => dataset=newDataset;\n  const setParameters = (newParameters) => parameters=newParameters;\n  const setSplit = (newSplit) => split=newSplit;\n\n  const getDataset = () => dataset;\n  const getParameters = () => parameters;\n  const getSplit = () => split;\n  \n  return (<>\n    <h1>Machine Learning Playground</h1>\n    <div id=\"flex-container\">\n      <div id=\"dataset-item\" className=\"col\">\n        <DatasetPannel onDatasetChange={setDataset} onSplitChange={setSplit}/>\n      </div>\n      <div id=\"parameter-item\" className=\"col\">\n        <Parameters onParameterChange={setParameters}/>\n      </div>\n      <div id=\"results-item\" className=\"col\">\n        <ResultsPannel getDataset={getDataset} getParameters={getParameters} getSplit={getSplit}/>\n      </div>\n    </div>\n  </>\n  )\n}\n\nReactDOM.render(\n  <App />, document.getElementById('root'));"],"sourceRoot":""}